/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing ownership and restricting unauthorized data access.
 * It leverages Firebase Authentication to verify user identity and authorize operations based on user IDs.
 *
 * Data Structure:
 * - Content: User-generated content stored in the `/content/{contentId}` collection. Each document has a `userId` field
 *   indicating the creator.
 *
 * Key Security Decisions:
 * - Public Read for Content: All users can read (get, list) all content.
 * - Owner-Only Writes for Content: Only the user who created the content can create, update, or delete it.
 *
 * Denormalization for Authorization:
 * - The `Content` entity requires a `userId` field for identifying the content creator.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to content, but restricts write access to the content creator.
     * @path /content/{contentId}
     * @allow (get, list) - Any user can read any content.
     * @allow (create) - User with UID 'user_abc' can create content with userId 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete content where content.userId == 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create content with userId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete content where content.userId == 'user_abc'.
     * @principle Allows public reading of content while restricting modifications to the owner.
     */
    match /content/{contentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource, and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}